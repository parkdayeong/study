// [★] : 동적 타입 언어


// [1] : 정적 타입 언어
// 보통 타입(Type)이라고 하면 '자료형'이고, 일반적으로 int, double, string, char 등의 타입이 있고, 변수명 앞에 자료형을 선언하고 사용한다.
// c, c++, c#, java 이런 언어들은 변수에 들어갈 값의 형태(종류)에 따라 그에 맞는 자료형을 변수명 앞에 써줘야 한다.
// 컴파일 과정에서 만약 변수명 앞에 써준 자료형이 값하고 틀린 자료형이면 에러를 발생시킨다.

// int num = 100;
// int num = 3.14;   // Err

// 이런 언어들을 조금 어려운 말로 --> "정적 타입 언어" (타입을 미리 지정해놔야 한다)
// 장점 --> 컴파일시에 타입이 미리 정해져있으면 --> 속도가 빠르고, 타입 에러가 사전에 발견되므로 에러날 확률 --> 적어진다. --> 안전성


// [2] : 동적 타입 언어
// JavaScript, Python과 같은 언어.
// 이러한 언어들은 변수를 만들 때 c, c++, c#, java 언어와 다르게 변수명 앞에 자료형 선언이나 자료형에 관계없이 만들 수 있다.
// JS 같은 경우는 var, let, const 키워드를 변수명 앞에 쓰고 어떤 데이터든 할당해주면 된다.
// 문자열을 넣으면 문자형 변수가 되는거고, 바로 다음 라인에서 숫자를 넣으면 숫자형 변수가 된다.

let name = "홍길동";  	// string
name = 20;			// number

// 이렇게 변수에 저장되는 데이터의 타입을 자유롭게 바꿀 수 있는 언어들을 조금 어려운 말로 --> "동적 타입 언어"
// 즉, 컴파일 시점에서 자료형을 정하는 것이 아니고, 실행 시점에서 결정하는 것이다.
// 장점 --> 유연하고 편리하다. --> js, py 언어들은 이러한 특징을 기반으로 유연성과 편리성을 극대화한 프로그래밍 언어들이다.
// 단점 --> 사전에 지정하는 것이 아니므로 타입 에러 발생이 상대적으로 높다. 너무 유연하고 자유로워서 그만큼 생각할 것도 많다.
// 가장 큰 장점 --> 배우기 쉽다.


















